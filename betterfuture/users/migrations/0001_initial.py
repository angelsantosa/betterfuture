# Generated by Django 2.1.3 on 2018-11-11 06:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import shortuuidfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        ('footprints', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', shortuuidfield.fields.ShortUUIDField(blank=True, editable=False, max_length=22, primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserFootPrint',
            fields=[
                ('uuid', shortuuidfield.fields.ShortUUIDField(blank=True, editable=False, max_length=22, primary_key=True, serialize=False)),
                ('value', models.PositiveIntegerField(verbose_name='Generic value')),
                ('footprint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='footprints.FootPrint')),
            ],
        ),
        migrations.CreateModel(
            name='UserCo2',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('food_quantity', models.FloatField(choices=[(0, 'Never'), (2.88, 'Almost never'), (5.76, 'Frequently'), (11.62, 'Very frequently')], default=0, verbose_name='Food quantity')),
                ('housing_quantity_dict', models.PositiveIntegerField(choices=[(1, 'Freestanding NRW'), (3, 'Freestanding RW'), (5, 'Multistore aparment'), (7, 'Duplex row house'), (10, 'Luxury condominum')], default=1, verbose_name='Housing quantity option')),
                ('housing_open', models.PositiveIntegerField(verbose_name='House quantity open')),
                ('km_travel_quantity', models.FloatField(verbose_name='Km travel')),
                ('fuel_economy_quantity', models.FloatField(verbose_name='Fuel economy km/lts')),
                ('food_co2', models.FloatField(blank=True, verbose_name='Food CO2')),
                ('housing_co2', models.FloatField(blank=True, verbose_name='Housing CO2')),
                ('transportation_co2', models.FloatField(blank=True, verbose_name='Transportation CO2')),
                ('co2_owed', models.FloatField(blank=True, verbose_name='Owed CO2')),
                ('co2_paid', models.FloatField(blank=True, verbose_name='Paid CO2')),
            ],
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('tokens', models.DecimalField(decimal_places=10, max_digits=19, verbose_name='Tokens')),
            ],
        ),
        migrations.AddField(
            model_name='userfootprint',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
